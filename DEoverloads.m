(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
Clear@myEquations
myEquations[initialconditions:{x0_,y0_,z0_,\[Theta]0_,\[Psi]0_,V0_},gammafun_,nyfun_,nxfun_,t0_:0]:=With[

{g=9.81,
t0rule={t->t-t0} (* for correcting domains of resulting InterpolationFunctions *)},

{
(* equations of motion *)
(nxfun/.t0rule)-Sin[\[Theta][t]]==V'[t]/g,
(nyfun Cos[gammafun]/.t0rule)-Cos[\[Theta][t]]==V[t]/g  \[Theta]'[t],
(nyfun Sin[gammafun]/.t0rule)==V [t]Cos[\[Theta][t]]/g (-\[Psi]'[t]),

(* kinematic relationships, which may be considered as a part of Eqs of M. *)
x'[t]==V[t]Cos[\[Theta][t]]Cos[\[Psi][t]],
y'[t]==V[t] Sin[\[Theta][t]],
z'[t]==-V[t] Sin[\[Psi][t]]Cos[\[Theta][t]],

(* initial conditions *)
x[t0]==x0,y[t0]==y0,z[t0]==z0,
\[Theta][t0]==\[Theta]0,  \[Psi][t0]==\[Psi]0,V[t0]==V0}]


(* ::Input::Initialization:: *)
ClearAll@maneuver
maneuver[initialconditions:{x0_,y0_,z0_,\[Theta]0_,\[Psi]0_,V0_},gammafun_,nyfun_,nxfun_,event_,t0_:0]:=First@Quiet[NDSolve[
myEquations[initialconditions,gammafun,nyfun,nxfun,t0]~Join~{WhenEvent[event,{"StopIntegration"}]},
{V,\[Theta],\[Psi],x,y,z},
{t,t0,Infinity}
],{NDSolve::ihist}](*/.{x_InterpolatingFunction[t]\[RuleDelayed]x[t-t0]}*)
maneuver[___]:=$Failed


(* ::Input::Initialization:: *)
ClearAll@tFinal
tFinal[manevrresult:{Rule__}]:=Last@First@((manevrresult[[1,1]]/.manevrresult))["Domain"]
tFinal[___]:=$Failed


(* ::Input::Initialization:: *)
ClearAll@lastState
lastState[manevrresult:{Rule__}]:=
Through[({V,\[Theta],\[Psi],x,y,z}/.manevrresult)[tFinal[manevrresult]]]
lastState[___]:=$Failed


(* ::Input::Initialization:: *)
ClearAll@trajPlotArgs 
trajPlotArgs[manevrresult:{Rule__}]:={#[t]&/@({x,y,z}/.manevrresult),tFinal[manevrresult]}
trajPlotArgs[___]:=$Failed


(* ::Input::Initialization:: *)
ClearAll@trajectoryPlot
trajectoryPlot[{input_,tfin_}]:=ParametricPlot3D[input,{t,0,tfin},PlotRange->Full,AxesLabel->{"x","y","z"}]
trajectoryPlot[manevrresult:{Rule__}]:=trajectoryPlot[trajPlotArgs[manevrresult]]
trajectoryPlot[___]:=$Failed

(* \:0438\:0441\:043f\:043e\:043b\:044c\:0437\:0443\:0435\:0442\:0441\:044f \:0444\:0443\:043d\:043a\:0446\:0438\:044f-\:043f\:0440\:043e\:043a\:043b\:0430\:0434\:043a\:0430 trajPlotArgs. \:041d\:0430\:043f\:0440\:044f\:043c\:0443\:044e, \:0441 \:043f\:0435\:0440\:0435\:0434\:0430\:0447\:0435\:0439 \:0432 ParametricPlot3D \:0440\:0435\:0448\:0435\:043d\:0438\:044f \:0432 \:0432\:0438\:0434\:0435 \:0441\:043f\:0438\:0441\:043a\:0430 \:043f\:0440\:0430\:0432\:0438\:043b, ParametricPlot3D \:043f\:043e\:0447\:0435\:043c\:0443-\:0442\:043e \:043d\:0435 \:0440\:0430\:0431\:043e\:0442\:0430\:0435\:0442 \:043f\:0440\:0438 \:0434\:043e\:0431\:0430\:0432\:043b\:0435\:043d\:0438\:0438 \:043e\:043f\:0446\:0438\:0439 \:043a \:0433\:0440\:0430\:0444\:0438\:043a\:0443; \:044f\:0432\:043d\:043e \:043a\:0430\:043a\:043e\:0439-\:0442\:043e \:0433\:043b\:044e\:043a \:043c\:0430\:0442\:0435\:043c\:0430\:0442\:0438\:043a\:0438 *)


(* ::Input::Initialization:: *)
(*
How to splice together several instances of InterpolatingFunction?

http://mathematica.stackexchange.com/questions/19042/how-to-splice-together-several-instances-of-interpolatingfunction
*)
Clear@JoinInterpolatingFunction
JoinInterpolatingFunction[intervals_List,flist_List]:=Module[{getGrid},getGrid[f_InterpolatingFunction,min_?NumericQ,max_?NumericQ]:={{min,f[min]}}~Join~(Transpose@{f["Grid"]//Flatten,f["ValuesOnGrid"]}//Select[#,(min<#[[1]]<max)&]&)~Join~{{max,f[max]}}//N;
Interpolation[Table[getGrid[flist[[i]],intervals[[i]],intervals[[i+1]]],{i,Length@flist}]//Flatten[#,1]&//DeleteDuplicates[#,(#1[[1]]==#2[[1]])&]&,InterpolationOrder->1]]



