(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)


Clear@myEquations
myEquations[initialconditions:{x0_,y0_,z0_,\[Theta]0_,\[Psi]0_,V0_},gammafun_,nyfun_,nxfun_,t0_:0]:=With[{g=9.81},
{nxfun-Sin[\[Theta][t]]==V'[t]/g,
nyfun Cos[gammafun]-Cos[\[Theta][t]]==V[t]/g  \[Theta]'[t],
nyfun Sin[gammafun]==V [t]Cos[\[Theta][t]]/g (-\[Psi]'[t]),
x'[t]==V[t]Cos[\[Theta][t]]Cos[\[Psi][t]],
y'[t]==V[t] Sin[\[Theta][t]],
z'[t]==-V[t] Sin[\[Psi][t]]Cos[\[Theta][t]],
x[0]==x0,y[0]==y0,z[0]==z0,
\[Theta][0]==\[Theta]0,  \[Psi][0]==\[Psi]0,V[0]==V0}]


(* ::Input::Initialization:: *)
ClearAll@manevr
manevr[initialconditions:{x0_,y0_,z0_,\[Theta]0_,\[Psi]0_,V0_},gammafun_,nyfun_,nxfun_,event_]:=NDSolve[
myEquations[initialconditions,gammafun,nyfun,nxfun,t0]~Join~{WhenEvent[event,{"StopIntegration"}]},
{V[t],\[Theta][t],\[Psi][t],x[t],y[t],z[t]},
{t,0,Infinity}
]
manevr[initialconditions:{x0_,y0_,z0_,\[Theta]0_,\[Psi]0_,V0_},gammafun_,nyfun_,nxfun_,event_,t0_:0]:=manevr[initialconditions,gammafun,nyfun,nxfun,event]/.{x_InterpolatingFunction[t]:>x[t-t0]}
manevr[___]:=$Failed


(* ::Input::Initialization:: *)
ClearAll@tFinal
tFinal[manevrresult:{Rule_}]:=Last@First@(Head@First@(manevrresult[[1,1,1]]/.manevrresult))["Domain"]
tFinal[___]:=$Failed


(* ::Input::Initialization:: *)
ClearAll@trajPlotArgs
trajPlotArgs[manevrresult:{Rule_}]:={{x[t],y[t],z[t]}/.manevrresult,tFinal[manevrresult]}
trajPlotArgs[___]:=$Failed


(* ::Input::Initialization:: *)
ClearAll@trajectoryPlot
trajectoryPlot[{input_,tfin_}]:=ParametricPlot3D[input,{t,0,tfin},PlotRange->Full,AxesLabel->{"x","y","z"}]

trajectoryPlot[manevrresult:{Rule_}]:=trajectoryPlot[trajPlotArgs[manevrresult]]
trajectoryPlot[___]:=$Failed

(* \:0438\:0441\:043f\:043e\:043b\:044c\:0437\:0443\:0435\:0442\:0441\:044f \:0444\:0443\:043d\:043a\:0446\:0438\:044f-\:043f\:0440\:043e\:043a\:043b\:0430\:0434\:043a\:0430. \:041d\:0430\:043f\:0440\:044f\:043c\:0443\:044e, \:0441 \:043f\:0435\:0440\:0435\:0434\:0430\:0447\:0435\:0439 \:0432 ParametricPlot3D \:0440\:0435\:0448\:0435\:043d\:0438\:044f \:0432 \:0432\:0438\:0434\:0435 \:0441\:043f\:0438\:0441\:043a\:0430 \:043f\:0440\:0430\:0432\:0438\:043b, \:043f\:043e\:0447\:0435\:043c\:0443-\:0442\:043e \:043d\:0435 \:0440\:0430\:0431\:043e\:0442\:0430\:0435\:0442 *)



